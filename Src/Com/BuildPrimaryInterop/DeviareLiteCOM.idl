/*
 * Copyright (C) 2010-2014 Nektra S.A., Buenos Aires, Argentina.
 * All rights reserved.
 *
 **/

import "oaidl.idl";
import "ocidl.idl";

//VERY IMPORTANT NOTE: I don't know the reason (may be the inheritance of interfaces) but the
//-------------------  proxy/stub code generated is broken with the default /Oicf MIDL compiler
//                     switch. BE SURE to add "/Os" to the additional options in the MIDL settings.
//                     Also set the "Generate stubless proxy" to NO and put inside a comment the
//                     "#define USE_STUBLESS_PROXY" sentence in 'DllDataX.c'
//                     With these settings now an object can be successfully marshaled between
//                     two STA threads.

#include "idl_size_t.h"
#include "disp_ids.h"

#define MY_VARIANT_FALSE   0 //avoid midl compiler errors
#define MY_VARIANT_TRUE   -1 //in defaultvalue values

//-----------------------------------------------------------
//-----------------------------------------------------------

interface INktHookLib;
interface INktHookInfo;

//-----------------------------------------------------------
//-----------------------------------------------------------

typedef [v1_enum] enum eNktHookFlags {
  hfDontSkipInitialJumps = 0x01,
  hfDontRemoveOnUnhook   = 0x02
} eNktHookFlags;

//-----------------------------------------------------------
//-----------------------------------------------------------

[
  object,
  uuid(64D7AC93-3941-49d7-BCD9-8D697E3D277F),
  dual, oleautomation, local,
  nonextensible,
  helpstring("INktHookLib Interface"),
  pointer_default(unique)
]
interface INktHookLib : IDispatch
{
  [id(dispidNktHookLibHook),
   helpstring("Install hooks in the current process")]
  HRESULT Hook([in] VARIANT itemsToHook, [in] LONG flags);

  [id(dispidNktHookLibRemoteHook),
   helpstring("Install hooks in a remote process")]
  HRESULT RemoteHook([in] VARIANT itemsToHook, [in] LONG pid, [in] LONG flags);

  [id(dispidNktHookLibUnhook),
   helpstring("Uninstall previously installed hooks")]
  HRESULT Unhook([in] VARIANT itemsToUnhook);

  [id(dispidNktHookLibUnhookProcess),
   helpstring("Unhook all hooks belonging to the specified process")]
  HRESULT UnhookProcess([in] LONG pid);

  [id(dispidNktHookLibUnhookAll),
   helpstring("Unhook all hooks")]
  HRESULT UnhookAll();

  [id(dispidNktHookLibEnableHook),
   helpstring("Enable/disable a set of hooks")]
  HRESULT EnableHook([in] VARIANT items, [in] VARIANT_BOOL enable);

  [propput, id(dispidNktHookLibSuspendThreadsWhileHooking),
   helpstring("Suspend process' threads while hooking")]
  HRESULT SuspendThreadsWhileHooking([in] VARIANT_BOOL enable);

  [propget, id(dispidNktHookLibSuspendThreadsWhileHooking),
   helpstring("Suspend process' threads while hooking")]
  HRESULT SuspendThreadsWhileHooking([out,retval] VARIANT_BOOL *enable);

  [propput, id(dispidNktHookLibShowDebugOutput),
   helpstring("Show/hide debug output")]
  HRESULT ShowDebugOutput([in] VARIANT_BOOL enable);

  [propget, id(dispidNktHookLibShowDebugOutput),
   helpstring("Show/hide debug output")]
  HRESULT ShowDebugOutput([out,retval] VARIANT_BOOL *enable);
};

//-----------------------------------------------------------
//-----------------------------------------------------------

[
  object,
  uuid(54A166F1-1D5C-45ac-8411-8E1932F21D8B),
  dual, oleautomation, local,
  nonextensible,
  helpstring("INktHookInfo Interface"),
  pointer_default(unique)
]
interface INktHookInfo : IDispatch
{
  [propget, id(dispidNktHookInfoId),
   helpstring("Hook id")]
  HRESULT Id([out, retval] LONG *hookId);

  [propget, id(dispidNktHookInfoOrigProcAddr),
   helpstring("Original function address")]
  HRESULT OrigProcAddr([out, retval] my_ssize_t *procAddr);

  [propput, id(dispidNktHookInfoOrigProcAddr),
   helpstring("Original function address")]
  HRESULT OrigProcAddr([in] my_ssize_t procAddr);

  [propget, id(dispidNktHookInfoNewProcAddr),
   helpstring("New function address")]
  HRESULT NewProcAddr([out, retval] my_ssize_t *procAddr);

  [propput, id(dispidNktHookInfoNewProcAddr),
   helpstring("New function address")]
  HRESULT NewProcAddr([in] my_ssize_t procAddr);

  [propget, id(dispidNktHookInfoCallOriginal),
   helpstring("Address for calling original function")]
  HRESULT CallOriginalAddr([out, retval] my_ssize_t *procAddr);
};

//-----------------------------------------------------------
//-----------------------------------------------------------

[
  uuid(F478CE40-7BCB-4304-8B01-2303E597312B),
  version(1.0),
  helpstring("DeviareLite 1.0 Type Library")
]
library DeviareLite
{
  importlib("stdole2.tlb");

  [v1_enum] enum eNktHookFlags;

  //---------------------------------------------------------
  //---------------------------------------------------------

  [
    uuid(CC78D151-6AA0-42d9-B9F1-C434CFAE695E),
    helpstring("HookLib Class")
  ]
  coclass NktHookLib
  {
    [default] interface INktHookLib;
  };

  //---------------------------------------------------------
  //---------------------------------------------------------

  [
    uuid(74A66D3C-D6D5-4991-90FC-59F312BCD624),
    helpstring("HookInfo Class")
  ]
  coclass NktHookInfo
  {
    [default] interface INktHookInfo;
  };
};
